<?php

namespace App\Models;

use App\Models\TaxableItem;
use App\Models\TaxTotal;
use App\Models\Value;
/**
 * Eloquent class to describe the Invoice table.
 *
 * automatically generated by ModelGenerator.php
 */
class Invoice extends \Illuminate\Database\Eloquent\Model
{
    protected $table = 'Invoice';

    public $primaryKey = 'Id';

    public $timestamps = false;
	protected $casts = [
        'Id' => 'integer',
		'totalDiscountAmount' => 'decimal:2',
		'totalSalesAmount' => 'decimal:2',
		'netAmount' => 'decimal:2',
		'totalAmount' => 'decimal:2',
		'extraDiscountAmount' => 'decimal:2',
		'totalItemsDiscountAmount' => 'decimal:2',
    ];

    protected $fillable = ['issuer_id', 'receiver_id', 'documentType', 'documentTypeVersion', 'dateTimeIssued', 'taxpayerActivityCode',
        'internalID', 'purchaseOrderReference', 'purchaseOrderDescription', 'salesOrderReference', 'salesOrderDescription',
        'proformaInvoiceNumber', 'totalDiscountAmount', 'totalSalesAmount', 'netAmount', 'totalAmount', 'extraDiscountAmount',
        'totalItemsDiscountAmount', 'uuid', 'submissionUUID', 'longId', 'createdByUserId', 'status', 'statusReason'];

    public function getDates()
    {
        return ['dateTimeIssued'];
    }

	public function normalize()
	{
		$salesTotal = 0;
		$total = 0;
		foreach($this->invoiceLines as $line) {
			$salesTotal += $line->salesTotal;
			$total += $line->total;
		}
		$this->netAmount = $salesTotal;
		$this->totalSalesAmount = $salesTotal;
		$this->totalAmount = $total;
	}

	public function updateTaxTotals()
	{
		$this->taxTotals()->delete();
		$taxTotals = array();
		foreach($this->invoiceLines as $line) {
			foreach($line->taxableItems as $item) {
				if (isset($taxTotals[$item->taxType]))
					$taxTotals[$item->taxType] += $item->amount; 
				else
					$taxTotals[$item->taxType] = $item->amount; 
			}
		}
		foreach($taxTotals as $key=>$item) {
			$totalTax = new TaxTotal();
			$totalTax->taxType = $key;
			$totalTax->amount = $item;
			$totalTax->invoice_id = $this->Id;
			$totalTax->save();	
		}
	}

    public function delivery()
    {
        return $this->belongsTo('App\Models\Delivery', 'delivery_id', 'Id');
    }

    public function issuer()
    {
        return $this->belongsTo('App\Models\Issuer', 'issuer_id', 'Id');
    }

    public function payment()
    {
        return $this->belongsTo('App\Models\Payment', 'payment_id', 'Id');
    }

    public function receiver()
    {
        return $this->belongsTo('App\Models\Receiver', 'receiver_id', 'Id');
    }

    public function invoiceLines()
    {
        return $this->hasMany('App\Models\InvoiceLine', 'invoice_id', 'Id');
    }

    public function taxTotals()
    {
        return $this->hasMany('App\Models\TaxTotal', 'invoice_id', 'Id');
    }
}
